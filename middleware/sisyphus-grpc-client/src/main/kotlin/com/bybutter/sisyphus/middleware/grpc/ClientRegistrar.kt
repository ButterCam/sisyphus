package com.bybutter.sisyphus.middleware.grpc

import com.bybutter.sisyphus.rpc.RpcClient
import com.bybutter.sisyphus.rpc.RpcService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.ClientInterceptor
import io.grpc.ManagedChannelBuilder
import io.grpc.stub.AbstractStub
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory
import org.springframework.beans.factory.getBeansOfType
import org.springframework.beans.factory.support.BeanDefinitionBuilder
import org.springframework.beans.factory.support.BeanDefinitionRegistry
import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor
import org.springframework.core.annotation.AnnotationUtils
import org.springframework.stereotype.Component

@Component
class ClientRegistrar : BeanDefinitionRegistryPostProcessor {
    companion object {
        private val logger = LoggerFactory.getLogger(ClientRegistrar::class.java)
    }

    override fun postProcessBeanFactory(beanFactory: ConfigurableListableBeanFactory) {
        val registry = beanFactory as BeanDefinitionRegistry
        for (serviceName in beanFactory.getBeanNamesForAnnotation(RpcServiceImpl::class.java)) {
            val serviceBeanDefinition = registry.getBeanDefinition(serviceName)

            val serviceClass = Class.forName(serviceBeanDefinition.beanClassName)
            val rpcService = AnnotationUtils.findAnnotation(serviceClass, RpcService::class.java) ?: continue

            val clientBeanDefinition = BeanDefinitionBuilder.genericBeanDefinition(rpcService.client.java as Class<Any>) {
                val service = beanFactory.getBean(serviceName)
                service.clientProxy<Any>(rpcService.client.java as Class<Any>)
            }

            registry.registerBeanDefinition(rpcService.value, clientBeanDefinition.beanDefinition)
            logger.info("Register '${rpcService.value}Clinet' via local service implement '$serviceName'")
        }

        val properties = beanFactory.getBeansOfType<GrpcChannelProperty>()
        if (properties.isEmpty()) return

        for (property in properties.values) {
            val channel = createGrpcChannel(property)
            beanFactory.registerSingleton(property.name, channel)

            for (client in property.clients) {
                val clientInfo = client.getAnnotation(RpcClient::class.java)
                        ?: throw IllegalStateException("Grpc clients must be annotated with 'RpcClient'.")
                if (registry.containsBeanDefinition(clientInfo.value)) {
                    continue
                }

                val clientBeanDefinition = BeanDefinitionBuilder.genericBeanDefinition(client as Class<AbstractStub<*>>) {
                    var result = createGrpcClient(client, channel, property)

                    val builderInterceptors = beanFactory.getBeansOfType(ClientBuilderInterceptor::class.java)
                    for ((_, builderInterceptor) in builderInterceptors) {
                        result = builderInterceptor.intercept(result)
                    }

                    val interceptors = beanFactory.getBeansOfType(ClientInterceptor::class.java)
                    result = result.withInterceptors(*interceptors.values.toTypedArray())

                    result
                }

                registry.registerBeanDefinition(clientInfo.value, clientBeanDefinition.beanDefinition)
                logger.info("Register '${clientInfo.value}($client)' via remote service '${property.target}'")
            }
        }
    }

    override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {
    }

    private fun createGrpcChannel(property: GrpcChannelProperty): Channel {
        return ManagedChannelBuilder.forTarget(property.target).usePlaintext().userAgent("Generated by Sisyphus").build()
    }

    private fun createGrpcClient(target: Class<*>, channel: Channel, property: GrpcChannelProperty): AbstractStub<*> {
        val stub = target.declaredClasses.first { AbstractStub::class.java.isAssignableFrom(it) }
        return stub.getDeclaredConstructor(Channel::class.java, CallOptions::class.java)
                .newInstance(channel, property.options) as AbstractStub<*>
    }
}
