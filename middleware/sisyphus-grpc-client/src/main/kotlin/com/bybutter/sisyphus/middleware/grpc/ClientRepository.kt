package com.bybutter.sisyphus.middleware.grpc

import com.bybutter.sisyphus.middleware.grpc.autoconfigure.ClientRegistrar
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.ClientInterceptor
import io.grpc.ManagedChannelBuilder
import io.grpc.stub.AbstractStub
import kotlin.reflect.full.companionObject
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory
import org.springframework.beans.factory.support.AbstractBeanDefinition
import org.springframework.core.env.Environment

interface ClientRepository {

    var order: Int

    fun listClientBeanDefinition(beanFactory: ConfigurableListableBeanFactory, environment: Environment): List<AbstractBeanDefinition>

    fun getStubFromService(service: Class<*>): Class<*> {
        return service.kotlin.companionObject?.java?.classes?.firstOrNull {
            it.simpleName == "Stub"
        } ?: throw IllegalStateException("Grpc service must have stub class in companion.")
    }

    fun getClientFromService(service: Class<*>): Class<*> {
        return service.declaredClasses.firstOrNull { it.simpleName == "Client" }
                ?: throw IllegalStateException("Grpc service must have nested class named 'Client'.")
    }

    fun processStub(stub: AbstractStub<*>, beanFactory: ConfigurableListableBeanFactory): AbstractStub<*> {
        var result = stub

        val builderInterceptors = beanFactory.getBeansOfType(ClientBuilderInterceptor::class.java)
        for ((_, builderInterceptor) in builderInterceptors) {
            result = builderInterceptor.intercept(result)
        }

        val interceptors = beanFactory.getBeansOfType(ClientInterceptor::class.java)
        return result.withInterceptors(*interceptors.values.toTypedArray())
    }

    fun createGrpcChannel(property: GrpcChannelProperty, beanFactory: ConfigurableListableBeanFactory): Channel {
        return ManagedChannelBuilder.forTarget(property.target).usePlaintext().userAgent("Generated by Sisyphus").build().apply {
            val channelLifecycleManager = beanFactory.getBean(ClientRegistrar.QUALIFIER_AUTO_CONFIGURED_GRPC_CHANNEL_LIFECYCLE) as ManagedChannelLifecycle
            channelLifecycleManager.registerManagedChannel(this)
        }
    }

    fun createGrpcChannel(name: String, port: Int, beanFactory: ConfigurableListableBeanFactory): Channel {
        return ManagedChannelBuilder.forAddress(name, port).usePlaintext().userAgent("Generated by Sisyphus").build().apply {
            val channelLifecycleManager = beanFactory.getBean(ClientRegistrar.QUALIFIER_AUTO_CONFIGURED_GRPC_CHANNEL_LIFECYCLE) as ManagedChannelLifecycle
            channelLifecycleManager.registerManagedChannel(this)
        }
    }

    fun createGrpcClient(target: Class<*>, channel: Channel, property: GrpcChannelProperty): AbstractStub<*> {
        return target.getDeclaredConstructor(Channel::class.java, CallOptions::class.java)
                .newInstance(channel, property.options) as AbstractStub<*>
    }

    fun createGrpcClient(target: Class<*>, channel: Channel): AbstractStub<*> {
        return target.getDeclaredConstructor(Channel::class.java, CallOptions::class.java)
                .newInstance(channel, CallOptions.DEFAULT) as AbstractStub<*>
    }
}
